// Copyright (c) 2020 by Meinrad Recheis (Member of SciSharp)
// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Numerics;
using System.Text.RegularExpressions;
using Cupy.Models;
using Python.Runtime;
#if PYTHON_INCLUDED
#endif

namespace Cupy
{
    public partial class PythonObject
    {
        //auto-generated
        public PyTuple ToTuple(Array input)
        {
            var array = new PyObject[input.Length];
            for (var i = 0; i < input.Length; i++) array[i] = ToPython(input.GetValue(i));
            return new PyTuple(array);
        }

        //auto-generated
        public PyObject ToPython(object obj)
        {
            if (obj == null) return Runtime.None;
            switch (obj)
            {
                // basic types
                case int o: return new PyInt(o);
                case long o: return new PyInt(o);
                case float o: return new PyFloat(o);
                case double o: return new PyFloat(o);
                case string o: return new PyString(o);
                case bool o: return o.ToPython();
                case PyObject o: return o;
                // sequence types
                case Array o: return ToTuple(o);
                // special types from 'ToPythonConversions'
                case Axis o: return o.Axes == null ? null : ToTuple(o.Axes);
                case Shape o: return ToTuple(o.Dimensions);
                case Slice o: return o.ToPython();
                case PythonObject o: return o.PyObject;
                case Dictionary<string, NDarray> o: return ToDict(o);
                default:
                    throw new NotImplementedException(
                        $"Type is not yet supported: {obj.GetType().Name}. Add it to 'ToPythonConversions'");
            }
        }

        //auto-generated
        public T ToCsharp<T>(dynamic pyobj)
        {
            switch (typeof(T).Name)
            {
                // types from 'ToCsharpConversions'
                case "Dtype": return (T)(object)new Dtype(pyobj);
                case "NDarray": return (T)(object)new NDarray(pyobj);
                case "NDarray`1":
                    switch (typeof(T).GenericTypeArguments[0].Name)
                    {
                        case "Byte": return (T)(object)new NDarray<byte>(pyobj);
                        case "Short": return (T)(object)new NDarray<short>(pyobj);
                        case "Boolean": return (T)(object)new NDarray<bool>(pyobj);
                        case "Int32": return (T)(object)new NDarray<int>(pyobj);
                        case "Int64": return (T)(object)new NDarray<long>(pyobj);
                        case "Single": return (T)(object)new NDarray<float>(pyobj);
                        case "Double": return (T)(object)new NDarray<double>(pyobj);
                        default:
                            throw new NotImplementedException(
                                $"Type NDarray<{typeof(T).GenericTypeArguments[0].Name}> missing. Add it to 'ToCsharpConversions'");
                    }

                    break;
                case "NDarray[]":
                    var po = pyobj as PyObject;
                    var len = po.Length();
                    var rv = new NDarray[len];
                    for (var i = 0; i < len; i++)
                        rv[i] = ToCsharp<NDarray>(po[i]);
                    return (T)(object)rv;
                case "Matrix": return (T)(object)new Matrix(pyobj);
                case "Int16": return Int16.Parse(pyobj.ToString());
                case "Int32": return Int32.Parse(pyobj.ToString());
                case "Int64": return Int64.Parse(pyobj.ToString());
                case "UInt16": return UInt16.Parse(pyobj.ToString());
                case "UInt32": return UInt32.Parse(pyobj.ToString());
                case "UInt64": return UInt64.Parse(pyobj.ToString());
                case "Single": return float.Parse(pyobj.ToString());
                case "Double": return double.Parse(pyobj.ToString());
                case "Complex": return ParseComplex(pyobj.ToString());
                case "Int16[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new Int16[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<Int16>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "Int32[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new int[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<Int32>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "Int64[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new Int64[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<Int64>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "UInt16[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new UInt16[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<UInt16>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "UInt32[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new UInt32[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<UInt32>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "UInt64[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new UInt64[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<UInt64>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "Single[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new float[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<float>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "Double[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new double[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<double>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "Complex[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new Complex[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<Complex>(_po[i]);
                        return (T)(object)_rv;
                    }
                case "Int32[][]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var __len = ToCsharp<Int32>(_po[0].len);
                        var _rv = new int[_len][];
                        for (var i = 0; i < _len; i++)
                        {
                            _rv[i] = new Int32[__len];
                            for (var j = 0; j < __len; j++)
                                _rv[i][j] = ToCsharp<Int32>(_po[i][j]);
                        }
                        return (T)(object)_rv;
                    }
                case "Int32[,]":
                    {
                        var _po = GetPo(pyobj);
                        var _len = ToCsharp<int>(pyobj.len);
                        var _rv = CreateInitialMultidimensionalArray<int>(_len, pyobj[0].len);
                        for (var i = 0; i < _len; i++)
                        {
                            if (_len == 1)
                            {
                                _rv[i, 0] = ToCsharp<int>(_po);
                            }
                            else
                            {
                                var elements = ToCsharp<int[]>(_po[i]);
                                for (int j = 0; j < elements.Length; j++)
                                {
                                    _rv[i, j] = elements[j];
                                }
                            }
                        }
                        return (T)(object)_rv;
                    }
                case "Single[,]":
                    {
                        var _po = GetPo(pyobj);
                        var _len = ToCsharp<int>(pyobj.len);
                        var _rv = CreateInitialMultidimensionalArray<float>(_len, pyobj[0].len);
                        for (var i = 0; i < _len; i++)
                        {
                            if (_len == 1)
                            {
                                _rv[i,0] = ToCsharp<float>(_po);
                            }
                            else
                            {
                                var elements = ToCsharp<float[]>(_po[i]);
                                for (int j = 0; j < elements.Length; j++)
                                {
                                    _rv[i,j] = elements[j];
                                }
                            }
                        }
                        return (T)(object)_rv;
                    }
                default:
                    var pyClass = $"{pyobj.__class__}";
                    if (pyClass == "<class 'str'>") return (T)(object)pyobj.ToString();
                    if (pyClass.StartsWith("<class 'Cupy")) return (pyobj.item() as PyObject).As<T>();
                    try
                    {
                        return pyobj.As<T>();
                    }
                    catch (Exception e)
                    {
                        throw new NotImplementedException(
                            $"conversion from {pyobj.__class__} to {typeof(T).Name} not implemented", e);
                        return default;
                    }
            }
        }

        public object ToCsharp(Type type, dynamic pyobj)
        {
            switch (type.Name)
            {
                // types from 'ToCsharpConversions'
                case "Dtype": return (object)new Dtype(pyobj);
                case "NDarray": return (object)new NDarray(pyobj);
                case "NDarray`1":
                    switch (type.GenericTypeArguments[0].Name)
                    {
                        case "Byte": return (object)new NDarray<byte>(pyobj);
                        case "Short": return (object)new NDarray<short>(pyobj);
                        case "Boolean": return (object)new NDarray<bool>(pyobj);
                        case "Int32": return (object)new NDarray<int>(pyobj);
                        case "Int64": return (object)new NDarray<long>(pyobj);
                        case "Single": return (object)new NDarray<float>(pyobj);
                        case "Double": return (object)new NDarray<double>(pyobj);
                        default:
                            throw new NotImplementedException(
                                $"Type NDarray<{type.GenericTypeArguments[0].Name}> missing. Add it to 'ToCsharpConversions'");
                    }

                    break;
                case "NDarray[]":
                    var po = pyobj as PyObject;
                    var len = po.Length();
                    var rv = new NDarray[len];
                    for (var i = 0; i < len; i++)
                        rv[i] = ToCsharp<NDarray>(po[i]);
                    return (object)rv;
                case "Matrix": return (object)new Matrix(pyobj);
                case "Int16": return Int16.Parse(pyobj.ToString());
                case "Int32": return Int32.Parse(pyobj.ToString());
                case "Int64": return Int64.Parse(pyobj.ToString());
                case "UInt16": return UInt16.Parse(pyobj.ToString());
                case "UInt32": return UInt32.Parse(pyobj.ToString());
                case "UInt64": return UInt64.Parse(pyobj.ToString());
                case "Single": return float.Parse(pyobj.ToString());
                case "Double": return double.Parse(pyobj.ToString());
                case "Complex": return ParseComplex(pyobj.ToString());
                case "Int16[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new Int16[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<Int16>(_po[i]);
                        return (object)_rv;
                    }
                case "Int32[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new int[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<Int32>(_po[i]);
                        return (object)_rv;
                    }
                case "Int64[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new Int64[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<Int64>(_po[i]);
                        return (object)_rv;
                    }
                case "UInt16[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new UInt16[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<UInt16>(_po[i]);
                        return (object)_rv;
                    }
                case "UInt32[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new UInt32[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<UInt32>(_po[i]);
                        return (object)_rv;
                    }
                case "UInt64[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new UInt64[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<UInt64>(_po[i]);
                        return (object)_rv;
                    }
                case "Single[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new float[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<float>(_po[i]);
                        return (object)_rv;
                    }
                case "Double[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new double[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<double>(_po[i]);
                        return (object)_rv;
                    }
                case "Complex[]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var _rv = new Complex[_len];
                        for (var i = 0; i < _len; i++)
                            _rv[i] = ToCsharp<Complex>(_po[i]);
                        return (object)_rv;
                    }
                case "Int32[][]":
                    {
                        var _po = GetPo(pyobj);
                        int _len = GetLen(_po);
                        var __len = ToCsharp<Int32>(_po[0].len);
                        var _rv = new int[_len][];
                        for (var i = 0; i < _len; i++)
                        {
                            _rv[i] = new Int32[__len];
                            for (var j = 0; j < __len; j++)
                                _rv[i][j] = ToCsharp<Int32>(_po[i][j]);
                        }
                        return (object)_rv;
                    }
                case "Int32[,]":
                    {
                        var _po = GetPo(pyobj);
                        var _len = ToCsharp<int>(pyobj.len);
                        var _rv = CreateInitialMultidimensionalArray<int>(_len, pyobj[0].len);
                        for (var i = 0; i < _len; i++)
                        {
                            if (_len == 1)
                            {
                                _rv[i, 0] = ToCsharp<int>(_po);
                            }
                            else
                            {
                                var elements = ToCsharp<int[]>(_po[i]);
                                for (int j = 0; j < elements.Length; j++)
                                {
                                    _rv[i, j] = elements[j];
                                }
                            }
                        }
                        return (object)_rv;
                    }
                case "Single[,]":
                    {
                        var _po = GetPo(pyobj);
                        var _len = ToCsharp<int>(pyobj.len);
                        var _rv = CreateInitialMultidimensionalArray<float>(_len, pyobj[0].len);
                        for (var i = 0; i < _len; i++)
                        {
                            if (_len == 1)
                            {
                                _rv[i, 0] = ToCsharp<float>(_po);
                            }
                            else
                            {
                                var elements = ToCsharp<float[]>(_po[i]);
                                for (int j = 0; j < elements.Length; j++)
                                {
                                    _rv[i, j] = elements[j];
                                }
                            }
                        }
                        return (object)_rv;
                    }
                default:
                    var pyClass = $"{pyobj.__class__}";
                    if (pyClass == "<class 'str'>") return (object)pyobj.ToString();
                    if (pyClass.StartsWith("<class 'Cupy")) return Convert.ChangeType((pyobj.item() as PyObject), type);
                    try
                    {
                        return pyobj.As(type);
                    }
                    catch (Exception e)
                    {
                        throw new NotImplementedException(
                            $"conversion from {pyobj.__class__} to {type.Name} not implemented", e);
                        return default;
                    }
            }
        }

        private int GetLen(dynamic _po)
        {
            int _len = 0;
            if ((_po as PyObject).HasAttr("__len__"))
            {
                _len = ToCsharp<NDarray>(_po).len;
            }
            else
            {
                _len = _po.size;
            }

            return _len;
        }

        private Complex ParseComplex(string input)
        {
            Regex regex = new Regex(@"\s*([-+]?\d+\.?\d*)\s*([-+]\s*\d+\.?\d*)[ij]\s*", RegexOptions.IgnoreCase);
            Match match = regex.Match(input);

            if (match.Success)
            {
                double realPart = double.Parse(match.Groups[1].Value, CultureInfo.InvariantCulture);
                double imaginaryPart = double.Parse(match.Groups[2].Value, CultureInfo.InvariantCulture);
                return new Complex(realPart, imaginaryPart);
            }
            else
            {
                throw new FormatException("Invalid complex number format.");
            }
        }

        private T[,] CreateInitialMultidimensionalArray<T>(int iCount, int jCount)
        {
            T[,] ret = new T[iCount, jCount];
            for (int i = 0; i < iCount; i++)
            {
                for (int j = 0; j < jCount; j++)
                {
                    ret[i, j] = default(T);
                }
            }
            return ret;
        }

        private static PyObject GetPo(dynamic pyobj)
        {
            return (pyobj is PythonObject) ? (pyobj as PythonObject).PyObject : (PyObject)pyobj;
        }

        //auto-generated
        public T SharpToSharp<T>(object obj)
        {
            if (obj == null) return default;
            switch (obj)
            {
                // from 'SharpToSharpConversions':
                case Array a:
                    if (typeof(T) == typeof(NDarray)) return (T)(object)ConvertArrayToNDarray(a);
                    break;
            }

            throw new NotImplementedException(
                $"Type is not yet supported: {obj.GetType().Name}. Add it to 'SharpToSharpConversions'");
        }

        //auto-generated: SpecialConversions
        private static NDarray ConvertArrayToNDarray(Array a)
        {
            switch (a)
            {
                case bool[] arr: return cp.array(arr);
                case int[] arr: return cp.array(arr);
                case float[] arr: return cp.array(arr);
                case double[] arr: return cp.array(arr);
                case int[,] arr: return cp.array(arr.Cast<int>().ToArray()).reshape(arr.GetLength(0), arr.GetLength(1));
                case float[,] arr:
                    return cp.array(arr.Cast<float>().ToArray()).reshape(arr.GetLength(0), arr.GetLength(1));
                case double[,] arr:
                    return cp.array(arr.Cast<double>().ToArray()).reshape(arr.GetLength(0), arr.GetLength(1));
                case bool[,] arr:
                    return cp.array(arr.Cast<bool>().ToArray()).reshape(arr.GetLength(0), arr.GetLength(1));
                default:
                    throw new NotImplementedException(
                        $"Type {a.GetType()} not supported yet in ConvertArrayToNDarray.");
            }
        }

        //auto-generated: SpecialConversions
        private static PyDict ToDict(Dictionary<string, NDarray> d)
        {
            var dict = new PyDict();
            foreach (var pair in d)
                dict[new PyString(pair.Key)] = pair.Value.self;
            return dict;
        }
    }
}