// Copyright (c) 2019 by the SciSharp Team
// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using NUnit.Framework;

namespace Cupy.UnitTest
{
    [TestFixture]
    public class Cupy_paddingTest : BaseTestCase
    {
        [Test]
        public void padTest()
        {
            // >>> a = [1, 2, 3, 4, 5]
            // >>> cp.pad(a, (2,3), 'constant', constant_values=(4, 6))
            // array([4, 4, 1, 2, 3, 4, 5, 6, 6, 6])
            // 

#if TODO
            var given = a = [1, 2, 3, 4, 5];
             given = cp.pad(a, (2,3), 'constant', constant_values = (4, 6));
            var expected =
                "array([4, 4, 1, 2, 3, 4, 5, 6, 6, 6])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2, 3), 'edge')
            // array([1, 1, 1, 2, 3, 4, 5, 5, 5, 5])
            // 

#if TODO
             given = cp.pad(a, (2, 3), 'edge');
             expected =
                "array([1, 1, 1, 2, 3, 4, 5, 5, 5, 5])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2, 3), 'linear_ramp', end_values=(5, -4))
            // array([ 5,  3,  1,  2,  3,  4,  5,  2, -1, -4])
            // 

#if TODO
             given = cp.pad(a, (2, 3), 'linear_ramp', end_values = (5, -4));
             expected =
                "array([ 5,  3,  1,  2,  3,  4,  5,  2, -1, -4])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2,), 'maximum')
            // array([5, 5, 1, 2, 3, 4, 5, 5, 5])
            // 

#if TODO
             given = cp.pad(a, (2,), 'maximum');
             expected =
                "array([5, 5, 1, 2, 3, 4, 5, 5, 5])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2,), 'mean')
            // array([3, 3, 1, 2, 3, 4, 5, 3, 3])
            // 

#if TODO
             given = cp.pad(a, (2,), 'mean');
             expected =
                "array([3, 3, 1, 2, 3, 4, 5, 3, 3])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2,), 'median')
            // array([3, 3, 1, 2, 3, 4, 5, 3, 3])
            // 

#if TODO
             given = cp.pad(a, (2,), 'median');
             expected =
                "array([3, 3, 1, 2, 3, 4, 5, 3, 3])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = [[1, 2], [3, 4]]
            // >>> cp.pad(a, ((3, 2), (2, 3)), 'minimum')
            // array([[1, 1, 1, 2, 1, 1, 1],
            //        [1, 1, 1, 2, 1, 1, 1],
            //        [1, 1, 1, 2, 1, 1, 1],
            //        [1, 1, 1, 2, 1, 1, 1],
            //        [3, 3, 3, 4, 3, 3, 3],
            //        [1, 1, 1, 2, 1, 1, 1],
            //        [1, 1, 1, 2, 1, 1, 1]])
            // 

#if TODO
             given = a = [[1, 2], [3, 4]];
             given = cp.pad(a, ((3, 2), (2, 3)), 'minimum');
             expected =
                "array([[1, 1, 1, 2, 1, 1, 1],\n" +
                "       [1, 1, 1, 2, 1, 1, 1],\n" +
                "       [1, 1, 1, 2, 1, 1, 1],\n" +
                "       [1, 1, 1, 2, 1, 1, 1],\n" +
                "       [3, 3, 3, 4, 3, 3, 3],\n" +
                "       [1, 1, 1, 2, 1, 1, 1],\n" +
                "       [1, 1, 1, 2, 1, 1, 1]])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = [1, 2, 3, 4, 5]
            // >>> cp.pad(a, (2, 3), 'reflect')
            // array([3, 2, 1, 2, 3, 4, 5, 4, 3, 2])
            // 

#if TODO
             given = a = [1, 2, 3, 4, 5];
             given = cp.pad(a, (2, 3), 'reflect');
             expected =
                "array([3, 2, 1, 2, 3, 4, 5, 4, 3, 2])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2, 3), 'reflect', reflect_type='odd')
            // array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8])
            // 

#if TODO
             given = cp.pad(a, (2, 3), 'reflect', reflect_type = 'odd');
             expected =
                "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2, 3), 'symmetric')
            // array([2, 1, 1, 2, 3, 4, 5, 5, 4, 3])
            // 

#if TODO
             given = cp.pad(a, (2, 3), 'symmetric');
             expected =
                "array([2, 1, 1, 2, 3, 4, 5, 5, 4, 3])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2, 3), 'symmetric', reflect_type='odd')
            // array([0, 1, 1, 2, 3, 4, 5, 5, 6, 7])
            // 

#if TODO
             given = cp.pad(a, (2, 3), 'symmetric', reflect_type = 'odd');
             expected =
                "array([0, 1, 1, 2, 3, 4, 5, 5, 6, 7])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> cp.pad(a, (2, 3), 'wrap')
            // array([4, 5, 1, 2, 3, 4, 5, 1, 2, 3])
            // 

#if TODO
             given = cp.pad(a, (2, 3), 'wrap');
             expected =
                "array([4, 5, 1, 2, 3, 4, 5, 1, 2, 3])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> def pad_with(vector, pad_width, iaxis, kwargs):
            // ...     pad_value = kwargs.get('padder', 10)
            // ...     vector[:pad_width[0]] = pad_value
            // ...     vector[-pad_width[1]:] = pad_value
            // ...     return vector
            // >>> a = cp.arange(6)
            // >>> a = a.reshape((2, 3))
            // >>> cp.pad(a, 2, pad_with)
            // array([[10, 10, 10, 10, 10, 10, 10],
            //        [10, 10, 10, 10, 10, 10, 10],
            //        [10, 10,  0,  1,  2, 10, 10],
            //        [10, 10,  3,  4,  5, 10, 10],
            //        [10, 10, 10, 10, 10, 10, 10],
            //        [10, 10, 10, 10, 10, 10, 10]])
            // >>> cp.pad(a, 2, pad_with, padder=100)
            // array([[100, 100, 100, 100, 100, 100, 100],
            //        [100, 100, 100, 100, 100, 100, 100],
            //        [100, 100,   0,   1,   2, 100, 100],
            //        [100, 100,   3,   4,   5, 100, 100],
            //        [100, 100, 100, 100, 100, 100, 100],
            //        [100, 100, 100, 100, 100, 100, 100]])
            // 

#if TODO
             given = def pad_with(vector, pad_width, iaxis, kwargs):;
             expected =
                "...     pad_value = kwargs.get('padder', 10)\n" +
                "...     vector[:pad_width[0]] = pad_value\n" +
                "...     vector[-pad_width[1]:] = pad_value\n" +
                "...     return vector";
            Assert.AreEqual(expected, given.repr);
             given = a = cp.arange(6);
             given = a = a.reshape((2, 3));
             given = cp.pad(a, 2, pad_with);
             expected =
                "array([[10, 10, 10, 10, 10, 10, 10],\n" +
                "       [10, 10, 10, 10, 10, 10, 10],\n" +
                "       [10, 10,  0,  1,  2, 10, 10],\n" +
                "       [10, 10,  3,  4,  5, 10, 10],\n" +
                "       [10, 10, 10, 10, 10, 10, 10],\n" +
                "       [10, 10, 10, 10, 10, 10, 10]])";
            Assert.AreEqual(expected, given.repr);
             given = cp.pad(a, 2, pad_with, padder = 100);
             expected =
                "array([[100, 100, 100, 100, 100, 100, 100],\n" +
                "       [100, 100, 100, 100, 100, 100, 100],\n" +
                "       [100, 100,   0,   1,   2, 100, 100],\n" +
                "       [100, 100,   3,   4,   5, 100, 100],\n" +
                "       [100, 100, 100, 100, 100, 100, 100],\n" +
                "       [100, 100, 100, 100, 100, 100, 100]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }
    }
}