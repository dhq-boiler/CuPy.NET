// Copyright (c) 2019 by the SciSharp Team
// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Cupy.UnitTest
{
    [TestClass]
    public class Cupy_setTest : BaseTestCase
    {
        [TestMethod]
        public void in1dTest()
        {
            // >>> test = cp.array([0, 1, 2, 5, 0])
            // >>> states = [0, 2]
            // >>> mask = cp.in1d(test, states)
            // >>> mask
            // array([ True, False,  True, False,  True])
            // >>> test[mask]
            // array([0, 2, 0])
            // >>> mask = cp.in1d(test, states, invert=True)
            // >>> mask
            // array([False,  True, False,  True, False])
            // >>> test[mask]
            // array([1, 5])
            // 

#if TODO
            var given = test = cp.array({0, 1, 2, 5, 0});
             given = states = [0, 2];
             given = mask = cp.in1d(test, states);
             given = mask;
            var expected =
                "array([ True, False,  True, False,  True])";
            Assert.AreEqual(expected, given.repr);
             given = test[mask];
             expected =
                "array([0, 2, 0])";
            Assert.AreEqual(expected, given.repr);
             given = mask = cp.in1d(test, states, invert = True);
             given = mask;
             expected =
                "array([False,  True, False,  True, False])";
            Assert.AreEqual(expected, given.repr);
             given = test[mask];
             expected =
                "array([1, 5])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void intersect1dTest()
        {
            // >>> cp.intersect1d([1, 3, 4, 3], [3, 1, 2, 1])
            // array([1, 3])
            // 

#if TODO
            var given = cp.intersect1d({1, 3, 4, 3}, {3, 1, 2, 1});
            var expected =
                "array([1, 3])";
            Assert.AreEqual(expected, given.repr);
#endif
            // To intersect more than two arrays, use functools.reduce:

            // >>> from functools import reduce
            // >>> reduce(cp.intersect1d, ([1, 3, 4, 3], [3, 1, 2, 1], [6, 3, 4, 2]))
            // array([3])
            // 

#if TODO
             given = from functools import reduce;
             given = reduce(cp.intersect1d, ({1, 3, 4, 3}, {3, 1, 2, 1}, {6, 3, 4, 2}));
             expected =
                "array([3])";
            Assert.AreEqual(expected, given.repr);
#endif
            // To return the indices of the values common to the input arrays
            // along with the intersected values:
            // >>> x = cp.array([1, 1, 2, 3, 4])
            // >>> y = cp.array([2, 1, 4, 6])
            // >>> xy, x_ind, y_ind = cp.intersect1d(x, y, return_indices=True)
            // >>> x_ind, y_ind
            // (array([0, 2, 4]), array([1, 0, 2]))
            // >>> xy, x[x_ind], y[y_ind]
            // (array([1, 2, 4]), array([1, 2, 4]), array([1, 2, 4]))
        }


        [TestMethod]
        public void isinTest()
        {
            // >>> element = 2*cp.arange(4).reshape((2, 2))
            // >>> element
            // array([[0, 2],
            //        [4, 6]])
            // >>> test_elements = [1, 2, 4, 8]
            // >>> mask = cp.isin(element, test_elements)
            // >>> mask
            // array([[ False,  True],
            //        [ True,  False]])
            // >>> element[mask]
            // array([2, 4])
            // 

#if TODO
            var given = element = 2*cp.arange(4).reshape((2, 2));
             given = element;
            var expected =
                "array([[0, 2],\n" +
                "       [4, 6]])";
            Assert.AreEqual(expected, given.repr);
             given = test_elements = [1, 2, 4, 8];
             given = mask = cp.isin(element, test_elements);
             given = mask;
             expected =
                "array([[ False,  True],\n" +
                "       [ True,  False]])";
            Assert.AreEqual(expected, given.repr);
             given = element[mask];
             expected =
                "array([2, 4])";
            Assert.AreEqual(expected, given.repr);
#endif
            // The indices of the matched values can be obtained with nonzero:

            // >>> cp.nonzero(mask)
            // (array([0, 1]), array([1, 0]))
            // 

#if TODO
             given = cp.nonzero(mask);
             expected =
                "(array([0, 1]), array([1, 0]))";
            Assert.AreEqual(expected, given.repr);
#endif
            // The test can also be inverted:

            // >>> mask = cp.isin(element, test_elements, invert=True)
            // >>> mask
            // array([[ True, False],
            //        [ False, True]])
            // >>> element[mask]
            // array([0, 6])
            // 

#if TODO
             given = mask = cp.isin(element, test_elements, invert = True);
             given = mask;
             expected =
                "array([[ True, False],\n" +
                "       [ False, True]])";
            Assert.AreEqual(expected, given.repr);
             given = element[mask];
             expected =
                "array([0, 6])";
            Assert.AreEqual(expected, given.repr);
#endif
            // Because of how array handles sets, the following does not
            // work as expected:

            // >>> test_set = {1, 2, 4, 8}
            // >>> cp.isin(element, test_set)
            // array([[ False, False],
            //        [ False, False]])
            // 

#if TODO
             given = test_set = {1, 2, 4, 8};
             given = cp.isin(element, test_set);
             expected =
                "array([[ False, False],\n" +
                "       [ False, False]])";
            Assert.AreEqual(expected, given.repr);
#endif
            // Casting the set to a list gives the expected result:

            // >>> cp.isin(element, list(test_set))
            // array([[ False,  True],
            //        [ True,  False]])
            // 

#if TODO
             given = cp.isin(element, list(test_set));
             expected =
                "array([[ False,  True],\n" +
                "       [ True,  False]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void setdiff1dTest()
        {
            // >>> a = cp.array([1, 2, 3, 2, 4, 1])
            // >>> b = cp.array([3, 4, 5, 6])
            // >>> cp.setdiff1d(a, b)
            // array([1, 2])
            // 

#if TODO
            var given = a = cp.array({1, 2, 3, 2, 4, 1});
             given = b = cp.array({3, 4, 5, 6});
             given = cp.setdiff1d(a, b);
            var expected =
                "array([1, 2])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void setxor1dTest()
        {
            // >>> a = cp.array([1, 2, 3, 2, 4])
            // >>> b = cp.array([2, 3, 5, 7, 5])
            // >>> cp.setxor1d(a,b)
            // array([1, 4, 5, 7])
            // 

#if TODO
            var given = a = cp.array({1, 2, 3, 2, 4});
             given = b = cp.array({2, 3, 5, 7, 5});
             given = cp.setxor1d(a,b);
            var expected =
                "array([1, 4, 5, 7])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void union1dTest()
        {
            // >>> cp.union1d([-1, 0, 1], [-2, 0, 2])
            // array([-2, -1,  0,  1,  2])
            // 

#if TODO
            var given = cp.union1d({-1, 0, 1}, {-2, 0, 2});
            var expected =
                "array([-2, -1,  0,  1,  2])";
            Assert.AreEqual(expected, given.repr);
#endif
            // To find the union of more than two arrays, use functools.reduce:

            // >>> from functools import reduce
            // >>> reduce(cp.union1d, ([1, 3, 4, 3], [3, 1, 2, 1], [6, 3, 4, 2]))
            // array([1, 2, 3, 4, 6])
            // 

#if TODO
             given = from functools import reduce;
             given = reduce(cp.union1d, ({1, 3, 4, 3}, {3, 1, 2, 1}, {6, 3, 4, 2}));
             expected =
                "array([1, 2, 3, 4, 6])";
            Assert.AreEqual(expected, given.repr);
#endif
        }
    }
}